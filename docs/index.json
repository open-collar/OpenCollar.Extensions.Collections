{
  "api/OpenCollar.Extensions.Collections.Generic.IFrozenLookup-2.html": {
    "href": "api/OpenCollar.Extensions.Collections.Generic.IFrozenLookup-2.html",
    "title": "Interface IFrozenLookup<TKey, TValue> | API Documentation",
    "keywords": "Interface IFrozenLookup<TKey, TValue> The interface implemented by the simple data structure in which primary keys and similar read-only key/value pairs are stored. Inherited Members System.IComparable<OpenCollar.Extensions.Collections.Generic.IFrozenLookup<TKey, TValue>>.CompareTo(OpenCollar.Extensions.Collections.Generic.IFrozenLookup<TKey, TValue>) System.IEquatable<OpenCollar.Extensions.Collections.Generic.IFrozenLookup<TKey, TValue>>.Equals(OpenCollar.Extensions.Collections.Generic.IFrozenLookup<TKey, TValue>) System.IComparable.CompareTo(System.Object) Namespace : OpenCollar.Extensions.Collections.Generic Assembly : OpenCollar.Extensions.Collections.dll Syntax public interface IFrozenLookup<TKey, TValue> : IComparable<IFrozenLookup<TKey, TValue>>, IEquatable<IFrozenLookup<TKey, TValue>>, IComparable where TKey : IComparable<TKey>, IEquatable<TKey> Type Parameters Name Description TKey The type of the key. TValue The type of the value. Properties Count Gets a count of the number of items in the dictionary. Declaration int Count { get; } Property Value Type Description System.Int32 The number of items in the dictionary. Item[TKey] Gets the value associated with the specified key. Declaration [CanBeNull] TValue this[[NotNull] TKey key] { get; set; } Parameters Type Name Description TKey key The key. Property Value Type Description TValue The value requested. Exceptions Type Condition System.Collections.Generic.KeyNotFoundException Item not found. Keys The keys identifying the values held in this dictionary. Declaration [NotNull] IEnumerable<TKey> Keys { get; } Property Value Type Description System.Collections.Generic.IEnumerable <TKey> Values The values held in this dictionary. Declaration [NotNull] IEnumerable<TValue> Values { get; } Property Value Type Description System.Collections.Generic.IEnumerable <TValue> ValuesSnapshot Gets a snapshot of the values held in this dictionary. Declaration [NotNull] IEnumerable<TValue> ValuesSnapshot { get; } Property Value Type Description System.Collections.Generic.IEnumerable <TValue> Methods Clone() Returns a clone of the current dictionary. Declaration [NotNull] IFrozenLookup<TKey, TValue> Clone() Returns Type Description IFrozenLookup <TKey, TValue> A clone of the dictionary given, including its existing values. Clone(Boolean) Returns a clone of the current dictionary. Declaration [NotNull] IFrozenLookup<TKey, TValue> Clone(bool copyExistingValues) Parameters Type Name Description System.Boolean copyExistingValues If set to true the values from the existing dictionary are copied; otherwise the values are left as default. Returns Type Description IFrozenLookup <TKey, TValue> A clone of the dictionary given. Clone<TNew>() Returns a clone of the dictionary given, with no values set and using TNew as the value type. Declaration [NotNull] IFrozenLookup<TKey, TNew> Clone<TNew>() Returns Type Description IFrozenLookup <TKey, TNew> A clone of the current dictionary given. Type Parameters Name Description TNew ContainsKey(TKey) Determines whether an item with the specified key exists in this dictionary. Declaration bool ContainsKey([CanBeNull] TKey key) Parameters Type Name Description TKey key The key for which to look. Returns Type Description System.Boolean true if the specified key is found; otherwise, false . KeyAt(Int32) Returns the key held at the index given. Declaration [NotNull] TKey KeyAt(int index) Parameters Type Name Description System.Int32 index The index at which to take the key. Returns Type Description TKey The key at the index specified. Exceptions Type Condition System.ArgumentOutOfRangeException index must be value greater than or equal to zero and less than the value returned by the Count property. TryGetValue(TKey, out TValue) Tries the get value specified by the key given. Declaration bool TryGetValue([NotNull] TKey key, [CanBeNull] out TValue value) Parameters Type Name Description TKey key The key identifying the value to find. TValue value An argument in which to return the value. Returns Type Description System.Boolean true if the value can be found, false otherwise. Exceptions Type Condition System.Collections.Generic.KeyNotFoundException ValueAt(Int32) Returns the value held at the index given. Declaration [CanBeNull] TValue ValueAt(int index) Parameters Type Name Description System.Int32 index The index at which to take the Value. Returns Type Description TValue The value at the index specified. Exceptions Type Condition System.ArgumentOutOfRangeException index must be value greater than or equal to zero and less than the value returned by the Count property. Extension Methods EnumerableExtensions.EnumerateRecursively<T>(T, Func<T, IEnumerable<T>>) EnumerableExtensions.GetChildren<TChild>(Object) See Also System.IComparable <T> System.IEquatable <T>"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "OpenCollar.Extensions.Collections | API Documentation",
    "keywords": "OpenCollar.Extensions.Collections Support for automatic validation, update and strongly-typed access to configuration. NuGet Package Installation Package and installation instructions at: https://www.nuget.org/packages/OpenCollar.Extensions.Collections/"
  },
  "api/OpenCollar.Extensions.Collections.Generic.EnumerableExtensions.html": {
    "href": "api/OpenCollar.Extensions.Collections.Generic.EnumerableExtensions.html",
    "title": "Class EnumerableExtensions | API Documentation",
    "keywords": "Class EnumerableExtensions Extensions to the System.Collections.Generic.IEnumerable<T> type and related methods. Inheritance System.Object EnumerableExtensions Namespace : OpenCollar.Extensions.Collections.Generic Assembly : OpenCollar.Extensions.Collections.dll Syntax public static class EnumerableExtensions Methods EnumerateRecursively<T>(T, Func<T, IEnumerable<T>>) Enumerates the children of an object recursively. Declaration [NotNull] [ItemNotNull] public static IEnumerable<T> EnumerateRecursively<T>([CanBeNull] this T parent, [NotNull] Func<T, IEnumerable<T>> enumerate) where T : class Parameters Type Name Description T parent The parent object to enumerate. System.Func <T, System.Collections.Generic.IEnumerable <T>> enumerate A function that enumerates the immediate children of a parent. Returns Type Description System.Collections.Generic.IEnumerable <T> A sequence containing the parent and all of its descendents enumerated in a depth-first search. Type Parameters Name Description T The type of the parent and its children. EnumerateSafely(IEnumerable) Allows any sequence to be safely enumerated, even if it is in fact null . Declaration [NotNull] [ItemCanBeNull] public static IEnumerable EnumerateSafely([CanBeNull] this IEnumerable sequence) Parameters Type Name Description System.Collections.IEnumerable sequence The sequence to enumerate. Returns Type Description System.Collections.IEnumerable The sequence given, if it is not null , otherwise an empty sequence of the same type. EnumerateSafely(IEnumerable, EnumerationKind) Allows any sequence to be safely enumerated, even if it is in fact null . Declaration [NotNull] [ItemCanBeNull] public static IEnumerable EnumerateSafely([CanBeNull] this IEnumerable sequence, EnumerationKind enumerationKind) Parameters Type Name Description System.Collections.IEnumerable sequence The sequence to enumerate. EnumerationKind enumerationKind The kind of the enumeration to perform. Returns Type Description System.Collections.IEnumerable The sequence given, if it is not null , otherwise an empty sequence of the same type. null elements will not be emitted if enumerationKind is ExcludeNulls . EnumerateSafely<T>(IEnumerable<T>) Allows any sequence to be safely enumerated, even if it is in fact null . Declaration [NotNull] [ItemCanBeNull] public static IEnumerable<T> EnumerateSafely<T>([CanBeNull] this IEnumerable<T> sequence) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> sequence The sequence to enumerate. Returns Type Description System.Collections.Generic.IEnumerable <T> The sequence given, if it is not null , otherwise an empty sequence of the same type. Type Parameters Name Description T The type of the elements in the sequence to enumerate. EnumerateSafely<T>(IEnumerable<T>, EnumerationKind) Allows any sequence to be safely enumerated, even if it is in fact null . Declaration [NotNull] [ItemCanBeNull] public static IEnumerable<T> EnumerateSafely<T>([CanBeNull] this IEnumerable<T> sequence, EnumerationKind enumerationKind) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> sequence The sequence to enumerate. EnumerationKind enumerationKind The kind of the enumeration to perform. Returns Type Description System.Collections.Generic.IEnumerable <T> The sequence given, if it is not null , otherwise an empty sequence of the same type. null elements will not be emitted if enumerationKind is ExcludeNulls . Type Parameters Name Description T The type of the elements in the sequence to enumerate. GetChildren<TChild>(Object) Recursively searches the object model given and returns all the objects of type TChild found in properties and enumerations in the root object and its descendants. Declaration [NotNull] [ItemNotNull] public static IEnumerable<TChild> GetChildren<TChild>([CanBeNull] this object root) where TChild : class Parameters Type Name Description System.Object root The root of the object model to search. Returns Type Description System.Collections.Generic.IEnumerable <TChild> A sequence containing all the child objects found directly or indirectly the root object. Type Parameters Name Description TChild"
  },
  "api/OpenCollar.Extensions.Collections.Generic.ListExtensions.html": {
    "href": "api/OpenCollar.Extensions.Collections.Generic.ListExtensions.html",
    "title": "Class ListExtensions | API Documentation",
    "keywords": "Class ListExtensions Extensions for the type. Inheritance System.Object ListExtensions Namespace : OpenCollar.Extensions.Collections.Generic Assembly : OpenCollar.Extensions.Collections.dll Syntax public static class ListExtensions Methods Synchronize<T>(IList<T>, IList<T>) Synchronizes the contents of two lists using the minimum changes. Declaration public static void Synchronize<T>([NotNull] this IList<T> target, [NotNull] IList<T> source) where T : class Parameters Type Name Description System.Collections.Generic.IList <T> target The target list that will be synchronized. System.Collections.Generic.IList <T> source The lists that defines the correct contents. Type Parameters Name Description T The type of the elements in the lists. Remarks The comparison used to identified unchanged items uses System.Object.ReferenceEquals(System.Object,System.Object) , to perform a custom comparison use the Synchronize<T>(IList<T>, IList<T>, Func<T, T, Boolean>) overload of this method. Synchronize<T>(IList<T>, IList<T>, Func<T, T, Boolean>) Synchronizes the contents of two lists using the minimum changes. Declaration public static void Synchronize<T>([NotNull] this IList<T> target, [NotNull] IList<T> source, [NotNull] Func<T, T, bool> equals) Parameters Type Name Description System.Collections.Generic.IList <T> target The target list that will be synchronized. System.Collections.Generic.IList <T> source The lists that defines the correct contents. System.Func <T, T, System.Boolean > equals The function to use when comparing elements. Type Parameters Name Description T The type of the elements in the lists. Remarks To use the System.Object.ReferenceEquals(System.Object,System.Object) function to compare elements use the Synchronize<T>(IList<T>, IList<T>) overload of this method."
  },
  "api/OpenCollar.Extensions.Collections.Generic.ReferenceCountingCache-3.ReferenceCountingCacheItemProxy.html": {
    "href": "api/OpenCollar.Extensions.Collections.Generic.ReferenceCountingCache-3.ReferenceCountingCacheItemProxy.html",
    "title": "Class ReferenceCountingCache<TKey, TItem, TProxy>.ReferenceCountingCacheItemProxy | API Documentation",
    "keywords": "Class ReferenceCountingCache<TKey, TItem, TProxy>.ReferenceCountingCacheItemProxy A base class for proxies representing a reference-counted cached item. Inheritance System.Object OpenCollar.Extensions.Disposable ReferenceCountingCache<TKey, TItem, TProxy>.ReferenceCountingCacheItemProxy Implements IReferenceCountingCacheItemProxy System.IDisposable System.IEquatable < IReferenceCountingCacheItemProxy > Inherited Members OpenCollar.Extensions.Disposable.Dispose() OpenCollar.Extensions.Disposable.CheckNotDisposed() Namespace : OpenCollar.Extensions.Collections.Generic Assembly : OpenCollar.Extensions.Collections.dll Syntax public abstract class ReferenceCountingCacheItemProxy : Disposable, IReferenceCountingCacheItemProxy, IDisposable, IEquatable<IReferenceCountingCacheItemProxy> Remarks Use the System.IDisposable.Dispose() method to decrement the reference count held in the underlying cache. Constructors ReferenceCountingCacheItemProxy(ReferenceCountingCacheItem<TKey, TItem, TProxy>) Initializes a new instance of the ReferenceCountingCache<TKey, TItem, TProxy>.ReferenceCountingCacheItemProxy class. Declaration protected ReferenceCountingCacheItemProxy([NotNull] ReferenceCountingCacheItem<TKey, TItem, TProxy> cacheItem) Parameters Type Name Description ReferenceCountingCacheItem <TKey, TItem, TProxy> cacheItem The cache item that this proxy will used to access the underlying object represented. Exceptions Type Condition System.ArgumentNullException cacheItem is null . Properties BaseItem Gets the underlying item to be represented by this proxy. Declaration protected TItem BaseItem { get; } Property Value Type Description TItem The base item represented by this proxy. Exceptions Type Condition System.ObjectDisposedException Object cannot be accessed after it has been disposed of. BaseItemUnchecked Gets the underlying item to be represented by this proxy. Declaration protected TItem BaseItemUnchecked { get; } Property Value Type Description TItem The base item represented by this proxy. Token Gets the token that represents related proxy objects. Declaration public IComparable Token { get; } Property Value Type Description System.IComparable The token that represents related proxy objects. Methods Clone() Returns a reference-counted clone of this instance. Declaration public IReferenceCountingCacheItemProxy Clone() Returns Type Description IReferenceCountingCacheItemProxy A reference-counted clone of this instance. Exceptions Type Condition System.ObjectDisposedException Object cannot be accessed after it has been disposed of. System.InvalidOperationException The OpenCollar.Extensions.Collections.Generic.ReferenceCountingCache`3.ReferenceCountingCacheItemProxy.ProxyFactory delegate returned null . Dispose(Boolean) Releases unmanaged and - optionally - managed resources. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Overrides OpenCollar.Extensions.Disposable.Dispose(System.Boolean) Equals(IReferenceCountingCacheItemProxy) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(IReferenceCountingCacheItemProxy other) Parameters Type Name Description IReferenceCountingCacheItemProxy other An object to compare with this object. Returns Type Description System.Boolean true true if the current object is equal to the other parameter; otherwise, false . Equals(Object) Determines whether the specified System.Object is equal to the current System.Object . Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The System.Object to compare with the current System.Object . Returns Type Description System.Boolean true if the specified System.Object is equal to the current System.Object ; otherwise, false . Overrides System.Object.Equals(System.Object) GetHashCode() Serves as a hash function for a particular type. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current System.Object . Overrides System.Object.GetHashCode() Operators Equality(ReferenceCountingCache<TKey, TItem, TProxy>.ReferenceCountingCacheItemProxy, ReferenceCountingCache<TKey, TItem, TProxy>.ReferenceCountingCacheItemProxy) Implements the == operator. Declaration public static bool operator ==([CanBeNull] ReferenceCountingCache<TKey, TItem, TProxy>.ReferenceCountingCacheItemProxy left, [CanBeNull] ReferenceCountingCache<TKey, TItem, TProxy>.ReferenceCountingCacheItemProxy right) Parameters Type Name Description ReferenceCountingCache.ReferenceCountingCacheItemProxy <> left The left-hand operand. ReferenceCountingCache.ReferenceCountingCacheItemProxy <> right The right-hand operand. Returns Type Description System.Boolean true if the two arguments are equal; otherwise, false . Inequality(ReferenceCountingCache<TKey, TItem, TProxy>.ReferenceCountingCacheItemProxy, ReferenceCountingCache<TKey, TItem, TProxy>.ReferenceCountingCacheItemProxy) Implements the != operator. Declaration public static bool operator !=([CanBeNull] ReferenceCountingCache<TKey, TItem, TProxy>.ReferenceCountingCacheItemProxy left, [CanBeNull] ReferenceCountingCache<TKey, TItem, TProxy>.ReferenceCountingCacheItemProxy right) Parameters Type Name Description ReferenceCountingCache.ReferenceCountingCacheItemProxy <> left The left-hand operand. ReferenceCountingCache.ReferenceCountingCacheItemProxy <> right The right-hand operand. Returns Type Description System.Boolean true if the two arguments are not equal; otherwise, false . Implements IReferenceCountingCacheItemProxy System.IDisposable System.IEquatable<T> Extension Methods EnumerableExtensions.EnumerateRecursively<T>(T, Func<T, IEnumerable<T>>) EnumerableExtensions.GetChildren<TChild>(Object) See Also System.IDisposable"
  },
  "usage/index.html": {
    "href": "usage/index.html",
    "title": "Basics | API Documentation",
    "keywords": "Basics The purpose of the libarary is to provide simple and concise extension methods that allow arguments and state to be validated efficiently at runtime."
  },
  "api/OpenCollar.Extensions.Collections.Generic.CircularList-1.html": {
    "href": "api/OpenCollar.Extensions.Collections.Generic.CircularList-1.html",
    "title": "Class CircularList<T> | API Documentation",
    "keywords": "Class CircularList<T> A fixed size list of type T . When an item is added it is placed in the next free space, when no more free spaces are available the original items in the list are overwritten. The oldest item is always the first item in the list. Inheritance System.Object CircularList<T> Implements System.Collections.Generic.IList <T> System.Collections.Generic.ICollection <T> System.Collections.Generic.IEnumerable <T> System.Collections.IEnumerable Namespace : OpenCollar.Extensions.Collections.Generic Assembly : OpenCollar.Extensions.Collections.dll Syntax [Serializable] public class CircularList<T> : IList<T>, ICollection<T>, IEnumerable<T>, IEnumerable Type Parameters Name Description T The type of value the list will hold. Constructors CircularList(Int32) Initializes a new instance of the CircularList<T> class. Declaration public CircularList(int length) Parameters Type Name Description System.Int32 length The length of the list. Exceptions Type Condition System.ArgumentOutOfRangeException Thrown if length is less than 1. CircularList(Int32, IEnumerable<T>) Initializes a new instance of the CircularList<T> class and loads the data supplied. Declaration public CircularList(int length, [NotNull] IEnumerable<T> values) Parameters Type Name Description System.Int32 length The length of the list. System.Collections.Generic.IEnumerable <T> values The values with which to load the list. The values are loaded backwards (e.g. the last first) to ensure that the order is maintained and the oldest (i.e. last) items are dropped of they exceed the length of the list. Properties Count Gets the number of elements contained in the that have actually been set; as opposed to MaxLength which is the maximum size of the circular list. When a list has been filled these two values will be the same. Declaration public int Count { get; } Property Value Type Description System.Int32 The number of elements contained in the that have actually been set. IsReadOnly Gets a value indicating whether the is read-only. Declaration public bool IsReadOnly { get; } Property Value Type Description System.Boolean true if the is read-only; otherwise, false . Item[Int32] Gets or sets the element at the specified index. Declaration [CanBeNull] public T this[int index] { get; set; } Parameters Type Name Description System.Int32 index The zero-based index of the element to get or set. Property Value Type Description T The element at the specified index. Exceptions Type Condition System.ArgumentOutOfRangeException index is not a valid index in the . MaxLength Gets the maximum length of the list. Declaration public int MaxLength { get; } Property Value Type Description System.Int32 Methods Add(T) Adds an item to the . Declaration public void Add([NotNull] T item) Parameters Type Name Description T item The object to add to the . Exceptions Type Condition System.NotSupportedException The is read-only. Clear() Removes all items from the . Declaration public void Clear() Exceptions Type Condition System.NotSupportedException The is read-only. Contains(T) Determines whether the contains a specific value. Declaration public bool Contains([NotNull] T item) Parameters Type Name Description T item The object to locate in the . Returns Type Description System.Boolean true if item is found in the ; otherwise, false . CopyTo(T[], Int32) Copies the elements of the to an System.Array , starting at a particular System.Array index. Declaration public void CopyTo([NotNull] T[] array, int arrayIndex) Parameters Type Name Description T[] array The one-dimensional System.Array that is the destination of the elements copied from . The System.Array must have zero-based indexing. System.Int32 arrayIndex The zero-based index in array at which copying begins. Exceptions Type Condition System.ArgumentNullException array is null . System.ArgumentOutOfRangeException arrayIndex is less than 0. System.ArgumentException array is multidimensional. -or- arrayIndex is equal to or greater than the length of array . -or- The number of elements in the source is greater than the available space from arrayIndex to the end of the destination array . -or- Type cannot be cast automatically to the type of the destination array . GetEnumerator() Returns an enumerator that iterates through the collection. Declaration [NotNull] public IEnumerator<T> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator <T> A that can be used to iterate through the collection. IndexOf(T) Determines the index of a specific item in the . Declaration public int IndexOf([NotNull] T item) Parameters Type Name Description T item The object to locate in the . Returns Type Description System.Int32 The index of item if found in the list; otherwise, -1. Insert(Int32, T) Inserts an item to the at the specified index. Declaration public void Insert(int index, T item) Parameters Type Name Description System.Int32 index The zero-based index at which item should be inserted. T item The object to insert into the . Exceptions Type Condition System.ArgumentOutOfRangeException index is not a valid index in the . System.NotSupportedException The is read-only. Load(IEnumerable<T>) Loads circular array with the specified values. Declaration public void Load([NotNull] IEnumerable<T> values) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> values The values with which to load the list. The values are loaded backwards (e.g. the last first) to ensure that the order is maintained and the oldest (i.e. last) items are dropped of they exceed the length of the list. Remove(T) Removes the first occurrence of a specific object from the . Declaration public bool Remove([NotNull] T item) Parameters Type Name Description T item The object to remove from the . Returns Type Description System.Boolean true if item was successfully removed from the ; otherwise, false . This method also returns false if item is not found in the original . Exceptions Type Condition System.NotSupportedException The is read-only. RemoveAt(Int32) Removes the item at the specified index. Declaration public void RemoveAt(int index) Parameters Type Name Description System.Int32 index The zero-based index of the item to remove. Exceptions Type Condition System.ArgumentOutOfRangeException index is not a valid index in the . System.NotSupportedException The is read-only. ToArray() Copies the contents of the circular list to an array and returns it. Declaration public T[] ToArray() Returns Type Description T[] An array containing all the items in the list, in order. Explicit Interface Implementations IEnumerable.GetEnumerator() Returns an enumerator that iterates through a collection. Declaration [NotNull] IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator An System.Collections.IEnumerator object that can be used to iterate through the collection. Implements System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable Extension Methods EnumerableExtensions.EnumerateSafely<T>(IEnumerable<T>) EnumerableExtensions.EnumerateSafely<T>(IEnumerable<T>, EnumerationKind) EnumerableExtensions.EnumerateSafely(IEnumerable) EnumerableExtensions.EnumerateSafely(IEnumerable, EnumerationKind) EnumerableExtensions.EnumerateRecursively<T>(T, Func<T, IEnumerable<T>>) EnumerableExtensions.GetChildren<TChild>(Object) ListExtensions.Synchronize<T>(IList<T>, IList<T>, Func<T, T, Boolean>)"
  },
  "api/OpenCollar.Extensions.Collections.Generic.ReferenceCountingCacheItem-3.html": {
    "href": "api/OpenCollar.Extensions.Collections.Generic.ReferenceCountingCacheItem-3.html",
    "title": "Class ReferenceCountingCacheItem<TKey, TItem, TProxy> | API Documentation",
    "keywords": "Class ReferenceCountingCacheItem<TKey, TItem, TProxy> An item in a reference counted cache Inheritance System.Object OpenCollar.Extensions.Disposable ReferenceCountingCacheItem<TKey, TItem, TProxy> Implements System.IDisposable Inherited Members OpenCollar.Extensions.Disposable.Dispose() OpenCollar.Extensions.Disposable.CheckNotDisposed() Namespace : OpenCollar.Extensions.Collections.Generic Assembly : OpenCollar.Extensions.Collections.dll Syntax public sealed class ReferenceCountingCacheItem<TKey, TItem, TProxy> : Disposable, IDisposable where TKey : class, IEquatable<TKey> where TProxy : ReferenceCountingCache<TKey, TItem, TProxy>.ReferenceCountingCacheItemProxy, IReferenceCountingCacheItemProxy Type Parameters Name Description TKey TItem TProxy Properties Token Gets the token that represents related proxy objects. Declaration [NotNull] public IComparable Token { get; } Property Value Type Description System.IComparable The token that represents related proxy objects. Methods Dispose(Boolean) Releases unmanaged and - optionally - managed resources. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Overrides OpenCollar.Extensions.Disposable.Dispose(System.Boolean) Implements System.IDisposable Extension Methods EnumerableExtensions.EnumerateRecursively<T>(T, Func<T, IEnumerable<T>>) EnumerableExtensions.GetChildren<TChild>(Object)"
  },
  "index.html": {
    "href": "index.html",
    "title": "OpenCollar.Extensions.Collections | API Documentation",
    "keywords": "OpenCollar.Extensions.Collections The purpose of the libarary is to provide simple and concise extension methods that allow arguments and state to be validated efficiently at runtime. NuGet Package Package and installation instructions at: https://www.nuget.org/packages/OpenCollar.Extensions.Collections/ Project Latest Build: Source Code on GitHub Issue Tracking on GitHub Documentation on GitHub Pages Usage The purpose of the libarary is to provide simple and concise extension methods that allow arguments and state to be validated efficiently at runtime. Related Project OpenCollar.Extensions OpenCollar.Extensions.Collections OpenCollar.Extensions.Collections"
  },
  "api/OpenCollar.Extensions.Collections.Generic.ReferenceCountingCache-3.html": {
    "href": "api/OpenCollar.Extensions.Collections.Generic.ReferenceCountingCache-3.html",
    "title": "Class ReferenceCountingCache<TKey, TItem, TProxy> | API Documentation",
    "keywords": "Class ReferenceCountingCache<TKey, TItem, TProxy> A simple cache that allows objects to be created and reused with referencing counting used to determine their lifetime. Inheritance System.Object OpenCollar.Extensions.Disposable ReferenceCountingCache<TKey, TItem, TProxy> Implements System.IDisposable Inherited Members OpenCollar.Extensions.Disposable.Dispose() OpenCollar.Extensions.Disposable.CheckNotDisposed() Namespace : OpenCollar.Extensions.Collections.Generic Assembly : OpenCollar.Extensions.Collections.dll Syntax public sealed class ReferenceCountingCache<TKey, TItem, TProxy> : Disposable, IDisposable where TKey : class, IEquatable<TKey> where TProxy : ReferenceCountingCache<TKey, TItem, TProxy>.ReferenceCountingCacheItemProxy, IReferenceCountingCacheItemProxy Type Parameters Name Description TKey The type of the key. TItem The type of the item. TProxy The type of the item proxy. Remarks Objects that implement the System.IDisposable interface will be disposed of if they expire. Constructors ReferenceCountingCache(Func<TKey, TItem>, Func<ReferenceCountingCacheItem<TKey, TItem, TProxy>, TProxy>) Initializes a new instance of the ReferenceCountingCache<TKey, TItem, TProxy> class. Declaration public ReferenceCountingCache([NotNull] Func<TKey, TItem> createItem, [NotNull] Func<ReferenceCountingCacheItem<TKey, TItem, TProxy>, TProxy> proxyFactory) Parameters Type Name Description System.Func <TKey, TItem> createItem The function used to create new instances of a cached item. System.Func < ReferenceCountingCacheItem <TKey, TItem, TProxy>, TProxy> proxyFactory The function used to create a new proxy for an existing cached item. Exceptions Type Condition System.ArgumentNullException createItem or proxyFactory is null . Properties Item[TKey] Gets the item with the specified key. Declaration [CanBeNull] public TProxy this[[NotNull] TKey key] { get; } Parameters Type Name Description TKey key The key identifying the object required. Property Value Type Description TProxy The object requested. Exceptions Type Condition System.ArgumentNullException key is null . System.InvalidOperationException The OpenCollar.Extensions.Collections.Generic.ReferenceCountingCache`3._proxyFactory delegate returned null . System.ObjectDisposedException Object cannot be accessed after it has been disposed of. Methods Delete(TItem) Deletes the specified item from the cache, forcing it to be recreated the next time it is requested. Declaration public void Delete(TItem item) Parameters Type Name Description TItem item The item to delete from the cache. Exceptions Type Condition System.ObjectDisposedException Object cannot be accessed after it has been disposed of. Dispose(Boolean) Releases unmanaged and - optionally - managed resources. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Overrides OpenCollar.Extensions.Disposable.Dispose(System.Boolean) Implements System.IDisposable Extension Methods EnumerableExtensions.EnumerateRecursively<T>(T, Func<T, IEnumerable<T>>) EnumerableExtensions.GetChildren<TChild>(Object)"
  },
  "api/OpenCollar.Extensions.Collections.Generic.IReferenceCountingCacheItemProxy.html": {
    "href": "api/OpenCollar.Extensions.Collections.Generic.IReferenceCountingCacheItemProxy.html",
    "title": "Interface IReferenceCountingCacheItemProxy | API Documentation",
    "keywords": "Interface IReferenceCountingCacheItemProxy The interface shared by all objects that act as proxies for items in a reference counted cache. Inherited Members System.IDisposable.Dispose() System.IEquatable<OpenCollar.Extensions.Collections.Generic.IReferenceCountingCacheItemProxy>.Equals(OpenCollar.Extensions.Collections.Generic.IReferenceCountingCacheItemProxy) Namespace : OpenCollar.Extensions.Collections.Generic Assembly : OpenCollar.Extensions.Collections.dll Syntax public interface IReferenceCountingCacheItemProxy : IDisposable, IEquatable<IReferenceCountingCacheItemProxy> Properties Token Gets the token that represents related proxy objects. Declaration [NotNull] IComparable Token { get; } Property Value Type Description System.IComparable The token. Methods Clone() Returns a reference-counted clone of this instance. Declaration [NotNull] IReferenceCountingCacheItemProxy Clone() Returns Type Description IReferenceCountingCacheItemProxy A reference-counted clone of this instance. Extension Methods EnumerableExtensions.EnumerateRecursively<T>(T, Func<T, IEnumerable<T>>) EnumerableExtensions.GetChildren<TChild>(Object) See Also System.IDisposable"
  },
  "api/OpenCollar.Extensions.Collections.Concurrent.html": {
    "href": "api/OpenCollar.Extensions.Collections.Concurrent.html",
    "title": "Namespace OpenCollar.Extensions.Collections.Concurrent | API Documentation",
    "keywords": "Namespace OpenCollar.Extensions.Collections.Concurrent Classes InMemoryCache<TKey, TItem> A simple cache that allows objects to be created and reused with a TTL to control their maximum lifetime."
  },
  "api/OpenCollar.Extensions.Collections.Generic.FrozenLookup-2.html": {
    "href": "api/OpenCollar.Extensions.Collections.Generic.FrozenLookup-2.html",
    "title": "Class FrozenLookup<TKey, TValue> | API Documentation",
    "keywords": "Class FrozenLookup<TKey, TValue> A class that can hold a fixed set of values with an efficient key-based means of retrieving the values. This class cannot be inherited. Inheritance System.Object FrozenLookup<TKey, TValue> Implements IFrozenLookup <TKey, TValue> System.IComparable < IFrozenLookup <TKey, TValue>> System.IEquatable < IFrozenLookup <TKey, TValue>> System.IComparable Namespace : OpenCollar.Extensions.Collections.Generic Assembly : OpenCollar.Extensions.Collections.dll Syntax public sealed class FrozenLookup<TKey, TValue> : IFrozenLookup<TKey, TValue>, IComparable<IFrozenLookup<TKey, TValue>>, IEquatable<IFrozenLookup<TKey, TValue>>, IComparable where TKey : IComparable<TKey>, IEquatable<TKey> Type Parameters Name Description TKey The type of the key. TValue The type of the value. Remarks This class is quicker and more memory efficient than a standard dictionary, at the cost of not being able to add new items after construction. Constructors FrozenLookup(TKey[]) Initializes a new instance of the FrozenLookup<TKey, TValue> class. Declaration public FrozenLookup([NotNull] TKey[] keys) Parameters Type Name Description TKey[] keys The keys to use. Exceptions Type Condition System.ArgumentNullException The keys argument was null . FrozenLookup(TValue[], Func<TValue, TKey>) Initializes a new instance of the FrozenLookup<TKey, TValue> class. Declaration public FrozenLookup([NotNull] TValue[] values, [NotNull] Func<TValue, TKey> getKey) Parameters Type Name Description TValue[] values The values held in this dictionary. System.Func <TValue, TKey> getKey A function that will return the key for a given value. Exceptions Type Condition System.ArgumentNullException The getKey function returned null for a value. System.ArgumentOutOfRangeException Two or more values correspond to the same key. System.ArgumentNullException The values argument was null . System.ArgumentOutOfRangeException The values argument was empty. FrozenLookup(FrozenLookup<TKey, TValue>, Boolean) Initializes a new instance of the FrozenLookup<TKey, TValue> class. Declaration public FrozenLookup([NotNull] FrozenLookup<TKey, TValue> cloneFrom, bool copyExistingValues) Parameters Type Name Description FrozenLookup <TKey, TValue> cloneFrom The dictionary from which to clone. System.Boolean copyExistingValues If set to true the values from the existing dictionary are copied; otherwise the values are left as default. Exceptions Type Condition System.ArgumentNullException The cloneFrom argument was null . FrozenLookup(Object[], Func<Object, TKey>, Func<Object, TValue>) Initializes a new instance of the FrozenLookup<TKey, TValue> class. Declaration public FrozenLookup([NotNull] object[] entries, [NotNull] Func<object, TKey> getKey, [NotNull] Func<object, TValue> getValue) Parameters Type Name Description System.Object [] entries The an array of entries from which the key and value can be derived. System.Func < System.Object , TKey> getKey A function that will return the key for a given entry. System.Func < System.Object , TValue> getValue A function that will return the value for a given entry. Exceptions Type Condition System.ArgumentNullException The entries argument was null . Properties Count Gets a count of the number of items in the dictionary. Declaration public int Count { get; } Property Value Type Description System.Int32 The number of items in the dictionary. Item[TKey] Gets the value associated with the specified key. Declaration public TValue this[TKey key] { get; set; } Parameters Type Name Description TKey key The key. Property Value Type Description TValue The value requested. Exceptions Type Condition System.Collections.Generic.KeyNotFoundException No item with the key specified could be found in the lookup. Keys Gets the keys identifying the values held in this dictionary. Declaration public IEnumerable<TKey> Keys { get; } Property Value Type Description System.Collections.Generic.IEnumerable <TKey> The keys identifying the values held in this dictionary. Values Gets the values held in this dictionary. Declaration public IEnumerable<TValue> Values { get; } Property Value Type Description System.Collections.Generic.IEnumerable <TValue> The values held in this dictionary. ValuesSnapshot Gets the values held in this dictionary. Declaration public IEnumerable<TValue> ValuesSnapshot { get; } Property Value Type Description System.Collections.Generic.IEnumerable <TValue> The values held in this dictionary. Methods Clone() Returns a clone of the current dictionary. Declaration public IFrozenLookup<TKey, TValue> Clone() Returns Type Description IFrozenLookup <TKey, TValue> A clone of the dictionary given, including its existing values. Clone(Boolean) Returns a clone of the current dictionary. Declaration public IFrozenLookup<TKey, TValue> Clone(bool copyExistingValues) Parameters Type Name Description System.Boolean copyExistingValues If set to true the values from the existing dictionary are copied; otherwise the values are left as default. Returns Type Description IFrozenLookup <TKey, TValue> A clone of the dictionary given. Clone<TNew>() Returns a clone of the dictionary given, with no values set and using TNew as the value type. Declaration public IFrozenLookup<TKey, TNew> Clone<TNew>() Returns Type Description IFrozenLookup <TKey, TNew> A clone of the current dictionary given. Type Parameters Name Description TNew CompareTo(IFrozenLookup<TKey, TValue>) Compares the current object with another object of the same type. Declaration public int CompareTo(IFrozenLookup<TKey, TValue> other) Parameters Type Name Description IFrozenLookup <TKey, TValue> other An object to compare with this object. Returns Type Description System.Int32 A value that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the other parameter.Zero This object is equal to other . Greater than zero This object is greater than other . CompareTo(Object) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the right object. Declaration public int CompareTo(object obj) Parameters Type Name Description System.Object obj An object to compare with this instance. Returns Type Description System.Int32 A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes obj in the sort order. Zero This instance occurs in the same position in the sort order as obj . Greater than zero This instance follows obj in the sort order. Exceptions Type Condition System.ArgumentException obj is not the same type as this instance. ContainsKey(TKey) Determines whether an item with the specified key exists in this dictionary. Declaration public bool ContainsKey(TKey key) Parameters Type Name Description TKey key The key for which to look. Returns Type Description System.Boolean true if the specified key is found; otherwise, false . Equals(IFrozenLookup<TKey, TValue>) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(IFrozenLookup<TKey, TValue> other) Parameters Type Name Description IFrozenLookup <TKey, TValue> other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false . Equals(Object) Determines whether the specified System.Object is equal to the current System.Object . Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The System.Object to compare with the current System.Object . Returns Type Description System.Boolean true if the specified System.Object is equal to the current System.Object ; otherwise, false . Overrides System.Object.Equals(System.Object) GetHashCode() Serves as a hash function for a particular type. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current System.Object . Overrides System.Object.GetHashCode() KeyAt(Int32) Returns the key held at the index given. Declaration public TKey KeyAt(int index) Parameters Type Name Description System.Int32 index The index at which to take the key. Returns Type Description TKey The key at the index specified. Exceptions Type Condition System.ArgumentOutOfRangeException index must be value greater than or equal to zero and less than the value returned by the Count property. ToString() Returns a System.String that represents the current System.Object . Declaration public override string ToString() Returns Type Description System.String A System.String that represents the current System.Object . Overrides System.Object.ToString() TryGetValue(TKey, out TValue) Tries the get value specified by the key given. Declaration public bool TryGetValue(TKey key, out TValue value) Parameters Type Name Description TKey key The key identifying the value to find. TValue value An argument in which to return the value. Returns Type Description System.Boolean true if the value can be found, false otherwise. Exceptions Type Condition System.Collections.Generic.KeyNotFoundException ValueAt(Int32) Returns the value held at the index given. Declaration public TValue ValueAt(int index) Parameters Type Name Description System.Int32 index The index at which to take the Value. Returns Type Description TValue The value at the index specified. Exceptions Type Condition System.ArgumentOutOfRangeException index must be value greater than or equal to zero and less than the value returned by the Count property. Operators Equality(FrozenLookup<TKey, TValue>, FrozenLookup<TKey, TValue>) Implements the equality operator. Declaration public static bool operator ==([CanBeNull] FrozenLookup<TKey, TValue> left, [CanBeNull] FrozenLookup<TKey, TValue> right) Parameters Type Name Description FrozenLookup <TKey, TValue> left The left operand. FrozenLookup <TKey, TValue> right The right operand. Returns Type Description System.Boolean The result of the operation. GreaterThan(FrozenLookup<TKey, TValue>, FrozenLookup<TKey, TValue>) Implements the greater-than operator. Declaration public static bool operator>([CanBeNull] FrozenLookup<TKey, TValue> left, [CanBeNull] FrozenLookup<TKey, TValue> right) Parameters Type Name Description FrozenLookup <TKey, TValue> left The left operand. FrozenLookup <TKey, TValue> right The right operand. Returns Type Description System.Boolean The result of the operation. GreaterThanOrEqual(FrozenLookup<TKey, TValue>, FrozenLookup<TKey, TValue>) Implements the greater-than-or-equals operator. Declaration public static bool operator >=([CanBeNull] FrozenLookup<TKey, TValue> left, [CanBeNull] FrozenLookup<TKey, TValue> right) Parameters Type Name Description FrozenLookup <TKey, TValue> left The left operand. FrozenLookup <TKey, TValue> right The right operand. Returns Type Description System.Boolean The result of the operation. Inequality(FrozenLookup<TKey, TValue>, FrozenLookup<TKey, TValue>) Implements the inequality operator. Declaration public static bool operator !=([CanBeNull] FrozenLookup<TKey, TValue> left, [CanBeNull] FrozenLookup<TKey, TValue> right) Parameters Type Name Description FrozenLookup <TKey, TValue> left The left operand. FrozenLookup <TKey, TValue> right The right operand. Returns Type Description System.Boolean The result of the operation. LessThan(FrozenLookup<TKey, TValue>, FrozenLookup<TKey, TValue>) Implements the less-than operator. Declaration public static bool operator <([CanBeNull] FrozenLookup<TKey, TValue> left, [CanBeNull] FrozenLookup<TKey, TValue> right) Parameters Type Name Description FrozenLookup <TKey, TValue> left The left operand. FrozenLookup <TKey, TValue> right The right operand. Returns Type Description System.Boolean The result of the operation. LessThanOrEqual(FrozenLookup<TKey, TValue>, FrozenLookup<TKey, TValue>) Implements the less-than-or-equals operator. Declaration public static bool operator <=([CanBeNull] FrozenLookup<TKey, TValue> left, [CanBeNull] FrozenLookup<TKey, TValue> right) Parameters Type Name Description FrozenLookup <TKey, TValue> left The left operand. FrozenLookup <TKey, TValue> right The right operand. Returns Type Description System.Boolean The result of the operation. Implements IFrozenLookup<TKey, TValue> System.IComparable<T> System.IEquatable<T> System.IComparable Extension Methods EnumerableExtensions.EnumerateRecursively<T>(T, Func<T, IEnumerable<T>>) EnumerableExtensions.GetChildren<TChild>(Object) See Also IFrozenLookup <TKey, TValue>"
  },
  "api/OpenCollar.Extensions.Collections.Concurrent.InMemoryCache-2.html": {
    "href": "api/OpenCollar.Extensions.Collections.Concurrent.InMemoryCache-2.html",
    "title": "Class InMemoryCache<TKey, TItem> | API Documentation",
    "keywords": "Class InMemoryCache<TKey, TItem> A simple cache that allows objects to be created and reused with a TTL to control their maximum lifetime. Inheritance System.Object OpenCollar.Extensions.Disposable InMemoryCache<TKey, TItem> Implements System.IDisposable Inherited Members OpenCollar.Extensions.Disposable.Dispose() OpenCollar.Extensions.Disposable.CheckNotDisposed() Namespace : OpenCollar.Extensions.Collections.Concurrent Assembly : OpenCollar.Extensions.Collections.dll Syntax public sealed class InMemoryCache<TKey, TItem> : Disposable, IDisposable where TKey : class, IEquatable<TKey> Type Parameters Name Description TKey The type of the key. TItem The type of the item. Remarks Objects that implement the System.IDisposable interface will be disposed of if they expire. If the AutoFlush property is set to true items in the cache are actively flushed when they expire; otherwise they are only flushed when they are requested. Call the Flush() method to checked for expired items at any time. Constructors InMemoryCache(TimeSpan, Func<TKey, TItem>) Initializes a new instance of the InMemoryCache<TKey, TItem> class. Declaration public InMemoryCache(TimeSpan ttl, [NotNull] Func<TKey, TItem> create) Parameters Type Name Description System.TimeSpan ttl The maximum permissible age of any item in the cache. System.Func <TKey, TItem> create The function used to create or refresh new instances of a cached value. Exceptions Type Condition System.ArgumentNullException Thrown if the create is null . InMemoryCache(TimeSpan, Func<TKey, TItem>, Boolean) Initializes a new instance of the InMemoryCache<TKey, TItem> class. Declaration public InMemoryCache(TimeSpan ttl, [NotNull] Func<TKey, TItem> create, bool autoDispose) Parameters Type Name Description System.TimeSpan ttl The maximum permissible age of any item in the cache. System.Func <TKey, TItem> create The function used to create or refresh new instances of a cached value. System.Boolean autoDispose true if disposable items should be disposed of when they expire; otherwise, false . AutoDispose InMemoryCache(TimeSpan, Func<TKey, TItem>, Boolean, Boolean) Initializes a new instance of the InMemoryCache<TKey, TItem> class. Declaration public InMemoryCache(TimeSpan ttl, [NotNull] Func<TKey, TItem> create, bool autoDispose, bool autoFlush) Parameters Type Name Description System.TimeSpan ttl The maximum permissible age of any item in the cache. System.Func <TKey, TItem> create The function used to create or refresh new instances of a cached value. System.Boolean autoDispose true if disposable items should be disposed of when they expire; otherwise, false . AutoDispose System.Boolean autoFlush If set to true the cache will automatically attempt to flush any stale items from the cache (to free resources). AutoFlush Properties AutoDispose Gets or sets a value indicating whether disposable items in the cache should be disposed of when they expire. Declaration public bool AutoDispose { get; set; } Property Value Type Description System.Boolean true if disposable items should be disposed of when they expire; otherwise, false . See Also AutoFlush AutoFlush A flag indicating whether to automatically attempt to flush any stale items from the cache (to free resources). Declaration public bool AutoFlush { get; set; } Property Value Type Description System.Boolean See Also AutoDispose Item[TKey] Gets the item with the specified key. Declaration [CanBeNull] public TItem this[[NotNull] TKey key] { get; } Parameters Type Name Description TKey key The key identifying the object required. Property Value Type Description TItem The object requested. Exceptions Type Condition System.ArgumentNullException key must not be null . Methods Clear() Clears all existing items from the cache. If AutoDispose is true the cached items that are removed will be disposed of if possible. Declaration public void Clear() Remarks The cached items cleared from the array will be disposed of asynchronously. Delete(TKey) Deletes the item associated with the key specified from the cache, forcing it to be recreated the next time it is requested. Declaration public void Delete([NotNull] TKey key) Parameters Type Name Description TKey key The key identifying the item to delete from the cache. Delete(TItem) Deletes the specified item from the cache, forcing it to be recreated the next time it is requested. Declaration public void Delete(TItem item) Parameters Type Name Description TItem item The item to delete from the cache. Dispose(Boolean) Releases unmanaged and - optionally - managed resources. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Overrides OpenCollar.Extensions.Disposable.Dispose(System.Boolean) Flush() Flushes all expired items from the cache. Declaration public void Flush() Remarks If the AutoDispose flag is set then any items that implement the System.IDisposable interface will be disposed of. See Also AutoDispose AutoFlush Events Flushed Occurs when cached items are flushed and one or more items have been removed. Declaration public event EventHandler<EventArgs> Flushed Event Type Type Description System.EventHandler < System.EventArgs > Implements System.IDisposable Extension Methods EnumerableExtensions.EnumerateRecursively<T>(T, Func<T, IEnumerable<T>>) EnumerableExtensions.GetChildren<TChild>(Object)"
  },
  "api/OpenCollar.Extensions.Collections.Generic.EnumerationKind.html": {
    "href": "api/OpenCollar.Extensions.Collections.Generic.EnumerationKind.html",
    "title": "Enum EnumerationKind | API Documentation",
    "keywords": "Enum EnumerationKind The ways in which a sequence can be safely enumerated. Namespace : OpenCollar.Extensions.Collections.Generic Assembly : OpenCollar.Extensions.Collections.dll Syntax public enum EnumerationKind Fields Name Description ExcludeNulls null elements are not included in the sequence returned. IncludeNulls null elements are included. Extension Methods EnumerableExtensions.GetChildren<TChild>()"
  },
  "api/OpenCollar.Extensions.Collections.Generic.html": {
    "href": "api/OpenCollar.Extensions.Collections.Generic.html",
    "title": "Namespace OpenCollar.Extensions.Collections.Generic | API Documentation",
    "keywords": "Namespace OpenCollar.Extensions.Collections.Generic Classes CircularList<T> A fixed size list of type T . When an item is added it is placed in the next free space, when no more free spaces are available the original items in the list are overwritten. The oldest item is always the first item in the list. EnumerableExtensions Extensions to the System.Collections.Generic.IEnumerable<T> type and related methods. FrozenLookup<TKey, TValue> A class that can hold a fixed set of values with an efficient key-based means of retrieving the values. This class cannot be inherited. ListExtensions Extensions for the type. ReferenceCountingCache<TKey, TItem, TProxy> A simple cache that allows objects to be created and reused with referencing counting used to determine their lifetime. ReferenceCountingCache<TKey, TItem, TProxy>.ReferenceCountingCacheItemProxy A base class for proxies representing a reference-counted cached item. ReferenceCountingCacheItem<TKey, TItem, TProxy> An item in a reference counted cache Interfaces IFrozenLookup<TKey, TValue> The interface implemented by the simple data structure in which primary keys and similar read-only key/value pairs are stored. IReferenceCountingCacheItemProxy The interface shared by all objects that act as proxies for items in a reference counted cache. Enums EnumerationKind The ways in which a sequence can be safely enumerated."
  }
}